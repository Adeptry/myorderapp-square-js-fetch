/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Square API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CardsPostBody,
  ErrorResponse,
  SquareCard,
  SquareDisableCardResponse,
  SquareListCardsResponse,
} from '../models/index';
import {
    CardsPostBodyFromJSON,
    CardsPostBodyToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SquareCardFromJSON,
    SquareCardToJSON,
    SquareDisableCardResponseFromJSON,
    SquareDisableCardResponseToJSON,
    SquareListCardsResponseFromJSON,
    SquareListCardsResponseToJSON,
} from '../models/index';

export interface DeleteCardsMeRequest {
    id: string;
    merchantIdOrPath: string;
    xCustomLang?: string;
}

export interface GetCardsMeRequest {
    merchantIdOrPath: string;
    cursor?: string;
    xCustomLang?: string;
}

export interface PostCardsMeRequest {
    merchantIdOrPath: string;
    cardsPostBody: CardsPostBody;
    xCustomLang?: string;
}

/**
 * 
 */
export class CardsApi extends runtime.BaseAPI {

    /**
     * Disable my Square Card
     */
    async deleteCardsMeRaw(requestParameters: DeleteCardsMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SquareDisableCardResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCardsMe.');
        }

        if (requestParameters.merchantIdOrPath === null || requestParameters.merchantIdOrPath === undefined) {
            throw new runtime.RequiredError('merchantIdOrPath','Required parameter requestParameters.merchantIdOrPath was null or undefined when calling deleteCardsMe.');
        }

        const queryParameters: any = {};

        if (requestParameters.merchantIdOrPath !== undefined) {
            queryParameters['merchantIdOrPath'] = requestParameters.merchantIdOrPath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/square/cards/me/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SquareDisableCardResponseFromJSON(jsonValue));
    }

    /**
     * Disable my Square Card
     */
    async deleteCardsMe(requestParameters: DeleteCardsMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SquareDisableCardResponse> {
        const response = await this.deleteCardsMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List my Square Cards
     */
    async getCardsMeRaw(requestParameters: GetCardsMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SquareListCardsResponse>> {
        if (requestParameters.merchantIdOrPath === null || requestParameters.merchantIdOrPath === undefined) {
            throw new runtime.RequiredError('merchantIdOrPath','Required parameter requestParameters.merchantIdOrPath was null or undefined when calling getCardsMe.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.merchantIdOrPath !== undefined) {
            queryParameters['merchantIdOrPath'] = requestParameters.merchantIdOrPath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/square/cards/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SquareListCardsResponseFromJSON(jsonValue));
    }

    /**
     * List my Square Cards
     */
    async getCardsMe(requestParameters: GetCardsMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SquareListCardsResponse> {
        const response = await this.getCardsMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create my Square Card
     */
    async postCardsMeRaw(requestParameters: PostCardsMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SquareCard>> {
        if (requestParameters.merchantIdOrPath === null || requestParameters.merchantIdOrPath === undefined) {
            throw new runtime.RequiredError('merchantIdOrPath','Required parameter requestParameters.merchantIdOrPath was null or undefined when calling postCardsMe.');
        }

        if (requestParameters.cardsPostBody === null || requestParameters.cardsPostBody === undefined) {
            throw new runtime.RequiredError('cardsPostBody','Required parameter requestParameters.cardsPostBody was null or undefined when calling postCardsMe.');
        }

        const queryParameters: any = {};

        if (requestParameters.merchantIdOrPath !== undefined) {
            queryParameters['merchantIdOrPath'] = requestParameters.merchantIdOrPath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/square/cards/me`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CardsPostBodyToJSON(requestParameters.cardsPostBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SquareCardFromJSON(jsonValue));
    }

    /**
     * Create my Square Card
     */
    async postCardsMe(requestParameters: PostCardsMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SquareCard> {
        const response = await this.postCardsMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
