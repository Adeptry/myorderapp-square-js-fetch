/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Square API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  UserEntity,
  UserPatchBody,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UserEntityFromJSON,
    UserEntityToJSON,
    UserPatchBodyFromJSON,
    UserPatchBodyToJSON,
} from '../models/index';

export interface DeleteUserMeRequest {
    xCustomLang?: string;
}

export interface GetUserMeRequest {
    customers?: boolean;
    merchants?: boolean;
    xCustomLang?: string;
}

export interface PatchUserMeRequest {
    userPatchBody: UserPatchBody;
    customers?: boolean;
    merchants?: boolean;
    xCustomLang?: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * 
     */
    async deleteUserMeRaw(requestParameters: DeleteUserMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEntity>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * 
     */
    async deleteUserMe(requestParameters: DeleteUserMeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEntity> {
        const response = await this.deleteUserMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getUserMeRaw(requestParameters: GetUserMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEntity>> {
        const queryParameters: any = {};

        if (requestParameters.customers !== undefined) {
            queryParameters['customers'] = requestParameters.customers;
        }

        if (requestParameters.merchants !== undefined) {
            queryParameters['merchants'] = requestParameters.merchants;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getUserMe(requestParameters: GetUserMeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEntity> {
        const response = await this.getUserMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async patchUserMeRaw(requestParameters: PatchUserMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.userPatchBody === null || requestParameters.userPatchBody === undefined) {
            throw new runtime.RequiredError('userPatchBody','Required parameter requestParameters.userPatchBody was null or undefined when calling patchUserMe.');
        }

        const queryParameters: any = {};

        if (requestParameters.customers !== undefined) {
            queryParameters['customers'] = requestParameters.customers;
        }

        if (requestParameters.merchants !== undefined) {
            queryParameters['merchants'] = requestParameters.merchants;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/users/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPatchBodyToJSON(requestParameters.userPatchBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * 
     */
    async patchUserMe(requestParameters: PatchUserMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEntity> {
        const response = await this.patchUserMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
