/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Square API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthAppleLoginDto,
  AuthGoogleLoginDto,
  AuthenticationEmailConfirmRequestBody,
  AuthenticationEmailLoginRequestBody,
  AuthenticationEmailRegisterRequestBody,
  AuthenticationPasswordForgotRequestBody,
  AuthenticationPasswordResetRequestBody,
  AuthenticationResponse,
  AuthenticationUpdateRequestBody,
  ErrorResponse,
  UserEntity,
} from '../models/index';
import {
    AuthAppleLoginDtoFromJSON,
    AuthAppleLoginDtoToJSON,
    AuthGoogleLoginDtoFromJSON,
    AuthGoogleLoginDtoToJSON,
    AuthenticationEmailConfirmRequestBodyFromJSON,
    AuthenticationEmailConfirmRequestBodyToJSON,
    AuthenticationEmailLoginRequestBodyFromJSON,
    AuthenticationEmailLoginRequestBodyToJSON,
    AuthenticationEmailRegisterRequestBodyFromJSON,
    AuthenticationEmailRegisterRequestBodyToJSON,
    AuthenticationPasswordForgotRequestBodyFromJSON,
    AuthenticationPasswordForgotRequestBodyToJSON,
    AuthenticationPasswordResetRequestBodyFromJSON,
    AuthenticationPasswordResetRequestBodyToJSON,
    AuthenticationResponseFromJSON,
    AuthenticationResponseToJSON,
    AuthenticationUpdateRequestBodyFromJSON,
    AuthenticationUpdateRequestBodyToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UserEntityFromJSON,
    UserEntityToJSON,
} from '../models/index';

export interface DeleteAuthMeRequest {
    xCustomLang?: string;
}

export interface PatchAuthMeRequest {
    authenticationUpdateRequestBody: AuthenticationUpdateRequestBody;
    xCustomLang?: string;
}

export interface PostEmailConfirmRequest {
    authenticationEmailConfirmRequestBody: AuthenticationEmailConfirmRequestBody;
    xCustomLang?: string;
}

export interface PostEmailLoginRequest {
    authenticationEmailLoginRequestBody: AuthenticationEmailLoginRequestBody;
    xCustomLang?: string;
}

export interface PostEmailRegisterRequest {
    authenticationEmailRegisterRequestBody: AuthenticationEmailRegisterRequestBody;
    xCustomLang?: string;
}

export interface PostLoginAppleRequest {
    authAppleLoginDto: AuthAppleLoginDto;
    xCustomLang?: string;
}

export interface PostLoginGoogleRequest {
    authGoogleLoginDto: AuthGoogleLoginDto;
    xCustomLang?: string;
}

export interface PostPasswordForgotRequest {
    authenticationPasswordForgotRequestBody: AuthenticationPasswordForgotRequestBody;
    xCustomLang?: string;
}

export interface PostPasswordResetRequest {
    authenticationPasswordResetRequestBody: AuthenticationPasswordResetRequestBody;
    xCustomLang?: string;
}

export interface PostRefreshRequest {
    xCustomLang?: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Delete Session
     */
    async deleteAuthMeRaw(requestParameters: DeleteAuthMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Session
     */
    async deleteAuthMe(requestParameters: DeleteAuthMeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAuthMeRaw(requestParameters, initOverrides);
    }

    /**
     * Update password
     */
    async patchAuthMeRaw(requestParameters: PatchAuthMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.authenticationUpdateRequestBody === null || requestParameters.authenticationUpdateRequestBody === undefined) {
            throw new runtime.RequiredError('authenticationUpdateRequestBody','Required parameter requestParameters.authenticationUpdateRequestBody was null or undefined when calling patchAuthMe.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationUpdateRequestBodyToJSON(requestParameters.authenticationUpdateRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * Update password
     */
    async patchAuthMe(requestParameters: PatchAuthMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEntity> {
        const response = await this.patchAuthMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm email
     */
    async postEmailConfirmRaw(requestParameters: PostEmailConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationEmailConfirmRequestBody === null || requestParameters.authenticationEmailConfirmRequestBody === undefined) {
            throw new runtime.RequiredError('authenticationEmailConfirmRequestBody','Required parameter requestParameters.authenticationEmailConfirmRequestBody was null or undefined when calling postEmailConfirm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/email/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailConfirmRequestBodyToJSON(requestParameters.authenticationEmailConfirmRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Confirm email
     */
    async postEmailConfirm(requestParameters: PostEmailConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postEmailConfirmRaw(requestParameters, initOverrides);
    }

    /**
     * Get access token
     */
    async postEmailLoginRaw(requestParameters: PostEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.authenticationEmailLoginRequestBody === null || requestParameters.authenticationEmailLoginRequestBody === undefined) {
            throw new runtime.RequiredError('authenticationEmailLoginRequestBody','Required parameter requestParameters.authenticationEmailLoginRequestBody was null or undefined when calling postEmailLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/email/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailLoginRequestBodyToJSON(requestParameters.authenticationEmailLoginRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     * Get access token
     */
    async postEmailLogin(requestParameters: PostEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.postEmailLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User and Authorize, note: tries to login first
     */
    async postEmailRegisterRaw(requestParameters: PostEmailRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.authenticationEmailRegisterRequestBody === null || requestParameters.authenticationEmailRegisterRequestBody === undefined) {
            throw new runtime.RequiredError('authenticationEmailRegisterRequestBody','Required parameter requestParameters.authenticationEmailRegisterRequestBody was null or undefined when calling postEmailRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/email/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationEmailRegisterRequestBodyToJSON(requestParameters.authenticationEmailRegisterRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     * Create User and Authorize, note: tries to login first
     */
    async postEmailRegister(requestParameters: PostEmailRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.postEmailRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apple login
     */
    async postLoginAppleRaw(requestParameters: PostLoginAppleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.authAppleLoginDto === null || requestParameters.authAppleLoginDto === undefined) {
            throw new runtime.RequiredError('authAppleLoginDto','Required parameter requestParameters.authAppleLoginDto was null or undefined when calling postLoginApple.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/apple/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAppleLoginDtoToJSON(requestParameters.authAppleLoginDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     * Apple login
     */
    async postLoginApple(requestParameters: PostLoginAppleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.postLoginAppleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Google login
     */
    async postLoginGoogleRaw(requestParameters: PostLoginGoogleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        if (requestParameters.authGoogleLoginDto === null || requestParameters.authGoogleLoginDto === undefined) {
            throw new runtime.RequiredError('authGoogleLoginDto','Required parameter requestParameters.authGoogleLoginDto was null or undefined when calling postLoginGoogle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/google/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthGoogleLoginDtoToJSON(requestParameters.authGoogleLoginDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     * Google login
     */
    async postLoginGoogle(requestParameters: PostLoginGoogleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.postLoginGoogleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Forgot password
     */
    async postPasswordForgotRaw(requestParameters: PostPasswordForgotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationPasswordForgotRequestBody === null || requestParameters.authenticationPasswordForgotRequestBody === undefined) {
            throw new runtime.RequiredError('authenticationPasswordForgotRequestBody','Required parameter requestParameters.authenticationPasswordForgotRequestBody was null or undefined when calling postPasswordForgot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/password/forgot`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationPasswordForgotRequestBodyToJSON(requestParameters.authenticationPasswordForgotRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Forgot password
     */
    async postPasswordForgot(requestParameters: PostPasswordForgotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postPasswordForgotRaw(requestParameters, initOverrides);
    }

    /**
     * Reset password
     */
    async postPasswordResetRaw(requestParameters: PostPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authenticationPasswordResetRequestBody === null || requestParameters.authenticationPasswordResetRequestBody === undefined) {
            throw new runtime.RequiredError('authenticationPasswordResetRequestBody','Required parameter requestParameters.authenticationPasswordResetRequestBody was null or undefined when calling postPasswordReset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/password/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationPasswordResetRequestBodyToJSON(requestParameters.authenticationPasswordResetRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset password
     */
    async postPasswordReset(requestParameters: PostPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postPasswordResetRaw(requestParameters, initOverrides);
    }

    /**
     * Refresh token
     */
    async postRefreshRaw(requestParameters: PostRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCustomLang !== undefined && requestParameters.xCustomLang !== null) {
            headerParameters['x-custom-lang'] = String(requestParameters.xCustomLang);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // Api-Key authentication
        }

        const response = await this.request({
            path: `/v2/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationResponseFromJSON(jsonValue));
    }

    /**
     * Refresh token
     */
    async postRefresh(requestParameters: PostRefreshRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationResponse> {
        const response = await this.postRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
